def is_safe(node, color, graph, colors):
    """
    Check if it's safe to assign a color to the node.
    This function checks if any adjacent nodes have the same color.
    """
    for neighbor in graph[node]:
        if colors[neighbor] == color:
            return False
    return True

def graph_coloring(graph, num_colors, colors, node):
    """
    Recursive function that attempts to color the graph using backtracking.
    """
    # If all nodes are colored, return True
    if node == len(graph):
        return True

    # Try assigning each color to the node
    for color in range(1, num_colors + 1):
        if is_safe(node, color, graph, colors):
            colors[node] = color  # Assign color
            
            # Recursively assign colors to the rest of the nodes
            if graph_coloring(graph, num_colors, colors, node + 1):
                return True

            # If assigning color didn't lead to a solution, backtrack
            colors[node] = 0

    # If no color can be assigned, return False
    return False

def solve_map_coloring(graph, num_colors):
    """
    Solves the map coloring problem using backtracking.
    """
    colors = [0] * len(graph)  # Initialize all nodes with no color (0)

    if not graph_coloring(graph, num_colors, colors, 0):
        print("No solution exists.")
        return None

    # Print the color assignment
    print("Solution exists: Following are the assigned colors:")
    for i in range(len(graph)):
        print(f"Node {i} ---> Color {colors[i]}")
    return colors

# Example usage
graph = [
    [1, 2, 3],  # Adjacency list for node 0
    [0, 2],     # Adjacency list for node 1
    [0, 1, 3],  # Adjacency list for node 2
    [0, 2]      # Adjacency list for node 3
]

num_colors = 3  # Number of colors
solve_map_coloring(graph, num_colors)
